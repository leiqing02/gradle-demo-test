buildscript {
  repositories {
    mavenCentral()
    dependencies {
      classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.+')
    }
  }
}
plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.13'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.chenj'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'




configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
//    mavenCentral()
    maven {
        setUrl("http://127.0.0.1:8082/artifactory/demo-gradle-virtual/")
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}


allprojects {
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'idea'
    configure(subprojects.findAll { new File(it.projectDir, 'src').directory }) {
        apply plugin: 'java'
    }
    repositories {
        // 公司代理google库
        maven {
            setUrl("http://127.0.0.1:8082/artifactory/demo-gradle-virtual/")
            credentials {
                username = "admin"
                password = "JFrog@2022"
            }
        }
    }

}

artifactoryPublish.skip = false

subprojects {
  apply plugin: 'maven'

  if (project.plugins.hasPlugin('java')) {
    //manifest.mainAttributes(provider: 'gradle')
	manifest {
		attributes 'provider': 'gradle'
	}
    configurations {
      published
    }
    dependencies {
      testImplementation 'junit:junit:4.7'
    }
    task sourceJar(type: Jar) {
      from sourceSets.main.allSource
      classifier = 'sources'
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from javadoc.destinationDir
    }
    artifactoryPublish {
      dependsOn sourceJar, javadocJar
    }
    artifacts {
      published sourceJar
      published javadocJar
    }
  }
}

configurations {
  published
}

// artifactory {
//   contextUrl = 'http://127.0.0.1:8082/artifactory'
//   publish {
//     repository {
//       repoKey = 'demo-gradle-virtual' // The Artifactory repository key to publish to
//       username = "admin" // The publisher user name
//       password = "JFrog@2022" // The publisher password
//       // This is an optional section for configuring Ivy publication (when publishIvy = true).
//       ivy {
//         ivyLayout = '[organization]/[module]/ivy-[revision].xml'
//         artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
//         mavenCompatible = true //Convert any dots in an [organization] layout value to path separators, similar to Maven's groupId-to-path conversion. True if not specified
//       }
//     }
//     defaults {
//       // Reference to Gradle configurations defined in the build script.
//       // This is how we tell the Artifactory Plugin which artifacts should be
//       // published to Artifactory.
//       publishConfigs('archives', 'published')
//       // Properties to be attached to the published artifacts.
//       properties = ['qa.level': 'basic', 'dev.team' : 'core']
//       // You can also attach properties to published artifacts according to
//       // the following notation:
//       // <configuration name> <artifact spec>
//       // The <configuration name> should be the name of the relevant Gradle Configuration or 'all'
//       // (for all configurations).
//       // Artifact spec has the following structure:
//       // group:artifact:version:classifier@ext
//       // Any element in the artifact spec notation can contain the * and ? wildcards.
//       // For example:
//       // org.acme:*:1.0.?_*:*@tgz
//       properties {
//         all '*:*:1.*:*@*', key1: 'val1', key2: 'val2'
//         all 'org.jfrog.*:*:1.*:*@jar*', key3: 'val3', key4: 'val4'
//       }
//       publishPom = true // Publish generated POM files to Artifactory (true by default)
//       publishIvy = true // Publish generated Ivy descriptor files to Artifactory (true by default)
//     }
//   }
// }

tasks.named('test') {
    useJUnitPlatform()
}


//创建task
//task("task1"){
//    println "hello task!!!"
//}
//task hello{
//    println "hello world"
//}

//task(hello2){
//    println "hello world2"
//}
//
//task ('hello3'){
//    println "hello world3"
//}

//task speak{
//    //task的配置阶段：配置阶段执行
//    println("This is AA------->配置阶段!")
//    //task的执行阶段：执行阶段执行
//    doFirst {
//        println("This is doFirst!------>inner ------>执行阶段")
//    }
//    doLast {
//        println("This is doLast! ------>执行阶段")
//    }
//}
//
//speak.doFirst {
//    println("This is doFirst!------>outer---------------->执行阶段")
//}
//speak.doLast{
//    println("This is doLast!------>outer---------------->执行阶段")
//}


//ext {
//    name = "AAA"
//}
//
//def age = 18
//
//task s1 {
//    doLast {
//        age = 12
//        rootProject.ext.name = "BBB"
//        println("This is s1...")
//    }
//}
//
//task s2 {
//    doLast {
//        println("age --> " + age)
//        println("name --> " + rootProject.ext.name)
//        println("This is s2...")
//    }
//}

//任务的依赖
//task s1{
//    doLast {
//        println("This is s1...")
//    }
//}
//
//task s2{
//    doLast {
//        println("This is s2...")
//    }
//}
//
//s1.dependsOn s2

//自定义task
//class MyTask extends DefaultTask {
//
//    @TaskAction
//    def ss1() {
//        println("This is MyTask --> action1!")
//    }
//
//    @TaskAction
//    def ss2() {
//        println("This is MyTask --> action2!")
//    }
//
//    @TaskAction
//    def ss3() {
//        println("This is MyTask --> action3!")
//    }
//
//}
//
//task speak(type: MyTask) {
//    println("This is AA!")
//    doFirst {
//        println("This is doFirst!")
//    }
//    doLast {
//        println("This is doLast!")
//    }
//}


defaultTasks 'cleanTask', 'runTask'

task cleanTask {
    doLast {
        println 'Default Cleaning!'
    }
}

task runTask {
    doLast {
        println 'Default Running!'
    }
}

task otherTask {
    doLast {
        println "I'm not a default task!"
    }
}
